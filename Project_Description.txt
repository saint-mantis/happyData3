# HappyData Django Web Application - Complete Development Prompt

## Project Overview
Build a complete Django web application called "HappyData" - a data visualization platform that helps users explore relationships between development indicators and human well-being using real-world APIs.

## Core Requirements

### Data Range and Sources
**Time Period: 2020-2025 (6 years of consistent data)**
1. **World Bank Indicators API**: `https://api.worldbank.org/v2/country/{country}/indicator/{indicator}?date=2020:2025`
2. **World Bank Country API**: `https://api.worldbank.org/v2/country?format=json`
3. **World Happiness Report Data**: 
   - **Excel file location**: `/Users/arunbabu/Desktop/Code/Happy Data 3/World_Happiness_Report_2020_2025.xlsx`
   - Contains all years (2020-2025) in consistent format
   - Includes Year column for filtering data by year
   - All "Explained by:" contributing factors available consistently
   - Expected structure: Year, Country name, Ladder score, upperwhisker, lowerwhisker, and all explained factors

### Key Features to Implement
1. **Country Indicator Trends**: Show how indicators change over time for selected countries
2. **Indicator vs Happiness Comparison**: Display both trends together on dual-axis charts
3. **Regional Happiness Distribution**: Visualize happiness levels across World Bank regions
4. **Regional Indicator Snapshot**: Compare indicator values across countries within a region for a selected year
5. **Dashboard Landing Page**: Overview with key insights and navigation

## Technical Specifications

### Technology Stack
- **Backend**: Django 4.x with Django REST Framework
- **Frontend**: Plain HTML5, CSS3, JavaScript (no frontend frameworks)
- **Database**: SQLite (for development)
- **Charts**: Chart.js library for visualizations
- **Styling**: Modern CSS with responsive design
- **APIs**: Fetch data from World Bank APIs

### Application Structure
```
happydata/
├── manage.py
├── happydata/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── dashboard/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── serializers.py
│   ├── services.py
│   └── migrations/
├── templates/
│   ├── base.html
│   ├── dashboard/
│   │   ├── index.html
│   │   ├── country_trends.html
│   │   ├── happiness_correlation.html
│   │   ├── regional_happiness.html
│   │   └── regional_comparison.html
└── static/
    ├── css/
    │   └── style.css
    └── js/
        └── dashboard.js
```

## Implementation Requirements

### CRITICAL: Ultra-Modern Frontend Design
**The frontend UI MUST be extremely modern and cutting-edge, following 2025 design trends:**
- Use contemporary design patterns (glassmorphism, neumorphism elements where appropriate)
- Implement smooth animations and micro-interactions throughout
- Create a cohesive design system with modern typography and color schemes
- Ensure the interface feels premium and visually striking
- Apply modern web design principles: proper spacing, visual hierarchy, modern shadows
- Make it look like a professional SaaS dashboard that users would pay for
- No basic or outdated styling - everything should feel fresh and contemporary

### Models (models.py)
Create Django models based on the actual World Bank API structure:

**Country Model:**
- id (CharField) - World Bank country code (e.g., "IN", "US")
- iso2_code (CharField) - 2-letter ISO code (e.g., "IN")
- name (CharField) - Country name (e.g., "India")
- capital_city (CharField) - Capital city name
- longitude (DecimalField) - Geographic coordinate
- latitude (DecimalField) - Geographic coordinate
- region_id (CharField) - World Bank region code
- region_value (CharField) - Region name (e.g., "South Asia")
- admin_region_id (CharField) - Administrative region code
- admin_region_value (CharField) - Administrative region name
- income_level_id (CharField) - Income classification code
- income_level_value (CharField) - Income level (e.g., "Lower middle income")
- lending_type_id (CharField) - Lending category code
- lending_type_value (CharField) - Lending type description

**Indicator Model:**
- id (CharField) - Indicator code (e.g., "NY.GDP.PCAP.CD")
- name (CharField) - Indicator name/description
- unit (CharField) - Measurement unit
- source_id (CharField) - Data source ID
- source_value (CharField) - Data source name
- source_note (TextField) - Detailed description
- source_organization (CharField) - Source organization

**CountryData Model:**
- country (ForeignKey to Country)
- indicator (ForeignKey to Indicator) 
- country_iso3_code (CharField) - 3-letter ISO code
- date (CharField) - Year as string
- value (DecimalField) - Actual indicator value
- unit (CharField) - Measurement unit
- obs_status (CharField) - Observation status
- decimal_places (IntegerField) - Number of decimal places

**HappinessData Model (Based on Final 2020-2025 CSV Structure):**
- country_name (CharField) - Country name from CSV (for mapping to World Bank codes)
- country (ForeignKey to Country) - Mapped World Bank country
- year (IntegerField) - Year (2020-2025, manually added per file)
- ladder_score (DecimalField) - Main happiness score (0-10 scale, e.g., 7.7360 for Finland)
- upper_whisker (DecimalField) - Upper confidence interval (e.g., 7.810000)
- lower_whisker (DecimalField) - Lower confidence interval (e.g., 7.662000)
- explained_by_freedom_to_make_life_choices (DecimalField) - Freedom factor
- explained_by_generosity (DecimalField) - Generosity factor
- explained_by_perceptions_of_corruption (DecimalField) - Corruption factor  
- dystopia_plus_residual (DecimalField) - Statistical residual
- explained_by_log_gdp_per_capita (DecimalField) - Economic factor
- explained_by_social_support (DecimalField) - Social support factor
- explained_by_healthy_life_expectancy (DecimalField) - Health factor
- region (CharField) - World Bank region (mapped from country code)

### Data Integration (services.py)
Create service functions to handle the exact World Bank API response structure:

**fetch_countries():**
- Parse nested region, adminregion, incomeLevel, lendingType objects
- Handle coordinates as strings and convert to decimals
- Filter out aggregate countries (those with region_value = "Aggregates")
- Store flattened country data in Country model

**fetch_indicators():**
- Parse indicator definitions with source information
- Handle topics as list of dictionaries
- Store commonly used indicators for the happiness analysis

**fetch_country_indicator_data(country_code, indicator_code, start_year, end_year):**
- Parse nested indicator and country objects from API response
- Handle the metadata structure: {'page': 1, 'pages': 1, 'per_page': 1000, 'total': X}
- Store data with proper data types (value as Decimal, date as string)
- Handle missing values (null/None values from API)
- Cache responses to reduce API calls

**process_happiness_excel_file():**
- Load World Happiness Report Excel file from: **`/Users/arunbabu/Desktop/Code/Happy Data 3/World_Happiness_Report_2020_2025.xlsx`**
- Handle Excel structure (could be single sheet with all years or multiple sheets per year)
- Process data with consistent column structure:
  ```
  Year, Country name, Ladder score, upperwhisker, lowerwhisker,
  Explained by: Freedom to make life choices, Explained by: Generosity,
  Explained by: Perceptions of corruption, Dystopia + residual,
  Explained by: Log GDP per capita, Explained by: Social support,
  Explained by: Healthy life expectancy
  ```
- Handle data quality issues: Some countries have 0.000000 values indicating missing data
- Create country name mapping from "Country name" to World Bank country codes:
  - "Finland" → "FI", "Afghanistan" → "AF", etc.
- Filter data by years 2020-2025
- Parse all "Explained by:" columns with proper decimal precision
- Validate ladder scores are within realistic range (0-10)
- Handle missing/zero values appropriately (store as null vs 0.0)
- Map countries to World Bank regions for regional analysis
- Remove duplicate country entries within same year (if any)

### Views and URLs
Create views for:
1. **Dashboard home** (`/`) - Landing page with overview
2. **Country trends** (`/country-trends/`) - Single country indicator over time
3. **Happiness correlation** (`/happiness-correlation/`) - Indicator vs happiness comparison  
4. **Regional happiness** (`/regional-happiness/`) - Regional happiness distribution
5. **Regional comparison** (`/regional-comparison/`) - Countries within region comparison

### API Endpoints (Django REST Framework)
Create endpoints that return properly structured data:

- `/api/countries/` - List countries with flattened structure (exclude aggregates)
  ```json
  {
    "id": "IN",
    "name": "India", 
    "region": "South Asia",
    "income_level": "Lower middle income",
    "capital_city": "New Delhi"
  }
  ```

- `/api/indicators/` - List available indicators for happiness analysis
  ```json
  {
    "id": "NY.GDP.PCAP.CD",
    "name": "GDP per capita (current US$)",
    "unit": "",
    "source": "World Bank national accounts data"
  }
  ```

- `/api/country-data/{country_code}/{indicator_code}/` - Time series data
  ```json
  [
    {
      "country": "India",
      "year": "2023",
      "value": 2530.12,
      "indicator": "GDP per capita (current US$)"
    }
  ]
  ```

- `/api/happiness-data/{country_code}/` - Happiness data with all factors (using final CSV structure)
  ```json
  [
    {
      "country": "Finland",
      "year": 2025,
      "ladder_score": 7.7360,
      "upper_whisker": 7.810000,
      "lower_whisker": 7.662000,
      "explained_by_freedom_to_make_life_choices": 0.986000,
      "explained_by_generosity": 0.110000,
      "explained_by_perceptions_of_corruption": 0.502000,
      "dystopia_plus_residual": 1.782000,
      "explained_by_log_gdp_per_capita": 1.749000,
      "explained_by_social_support": 1.783000,
      "explained_by_healthy_life_expectancy": 0.824000,
      "region": "Europe and Central Asia"
    }
  ]
  ```

- `/api/regional-happiness/` - Happiness by World Bank regions
- `/api/regional-indicators/{region}/{indicator}/{year}/` - Regional comparison data

### Frontend Features (VERY MODERN UI REQUIRED)
- **Ultra-modern, cutting-edge interface** with contemporary design trends
- **Dark mode support** with elegant color schemes and glassmorphism effects
- **Interactive dashboard** with smooth animations and micro-interactions
- **Responsive navigation** with modern hamburger menu and smooth transitions
- **Dynamic forms** with floating labels, modern input styling, and real-time validation
- **Advanced data visualizations** using Chart.js with custom styling and animations
- **Card-based layouts** with subtle shadows, rounded corners, and hover effects
- **Loading states** with modern skeleton screens and animated spinners
- **Gradient backgrounds** and modern color palettes (consider current design trends)
- **Typography** using modern font stacks (Inter, Poppins, or system fonts)
- **Micro-animations** for user interactions (button hovers, form submissions, data loading)
- **Progressive disclosure** with expandable sections and smooth reveal animations
- **Modern icons** (Lucide, Heroicons, or similar modern icon sets)
- **Advanced CSS techniques**: CSS Grid, Flexbox, custom properties, backdrop-filter
- **Export functionality** with modern modal dialogs and download animations
- **Mobile-first responsive design** with touch-friendly interfaces

### Key World Bank Indicators to Include (Based on API Structure)
Focus on these indicators that correlate well with happiness and are reliably available:

**Economic Indicators:**
- NY.GDP.PCAP.CD - GDP per capita (current US$)
- NY.GDP.PCAP.PP.CD - GDP per capita, PPP (current international $)
- SI.POV.GINI - GINI index (World Bank estimate)

**Health & Demographics:**
- SP.DYN.LE00.IN - Life expectancy at birth, total (years)
- SH.XPD.CHEX.GD.ZS - Current health expenditure (% of GDP)
- SP.POP.TOTL - Population, total

**Education:**
- SE.XPD.TOTL.GD.ZS - Government expenditure on education, total (% of GDP)
- SE.ENR.SECO.NE - School enrollment, secondary (% net)

**Employment & Social:**
- SL.UEM.TOTL.ZS - Unemployment, total (% of total labor force)
- SL.TLF.CACT.ZS - Labor force participation rate, total (% of total population ages 15+)

**Environment:**
- EN.ATM.CO2E.PC - CO2 emissions (metric tons per capita)
- EG.ELC.ACCS.ZS - Access to electricity (% of population)

**Governance & Infrastructure:**
- IT.NET.USER.ZS - Internet users (% of population)
- SP.URB.TOTL.IN.ZS - Urban population (% of total population)

### Real World Happiness Report Data Structure (Excel File: /Users/arunbabu/Desktop/Code/Happy Data 3/World_Happiness_Report_2020_2025.xlsx)
The application will process a single Excel file containing all 2020-2025 data with this structure:
- **Year** - Year as integer (2020, 2021, 2022, 2023, 2024, 2025)
- **Country name** - Country name as text (e.g., "Finland", "Afghanistan")
- **Ladder score** - Main happiness score (0-10 scale, e.g., 7.7360 for Finland, 1.7210 for Afghanistan)
- **upperwhisker** - Upper confidence interval (e.g., 7.810000)
- **lowerwhisker** - Lower confidence interval (e.g., 7.662000)
- **All contributing factors available:**
  - Explained by: Freedom to make life choices
  - Explained by: Generosity  
  - Explained by: Perceptions of corruption
  - Dystopia + residual
  - Explained by: Log GDP per capita
  - Explained by: Social support
  - Explained by: Healthy life expectancy

**Excel File Processing:**
- File path: `/Users/arunbabu/Desktop/Code/Happy Data 3/World_Happiness_Report_2020_2025.xlsx`
- Use pandas with openpyxl to read Excel file
- Handle both single sheet or multiple sheets structure
- Filter data for years 2020-2025
- Process all years in one go instead of separate files

**Data Quality Notes:**
- Some countries have 0.000000 values indicating missing data (convert to null in database)
- All 7 contributing factors are consistently available across years
- **Country name mapping**: Create comprehensive dictionary to map Excel country names to World Bank codes (based on actual Excel file contents):
  ```python
  COUNTRY_NAME_TO_CODE_MAPPING = {
      # Major countries
      "Finland": "FI", "Denmark": "DK", "Switzerland": "CH", "Iceland": "IS", 
      "Norway": "NO", "Netherlands": "NL", "Sweden": "SE", "New Zealand": "NZ",
      "Austria": "AT", "Luxembourg": "LU", "Canada": "CA", "Australia": "AU",
      "United Kingdom": "GB", "Israel": "IL", "Costa Rica": "CR", "Ireland": "IE",
      "Germany": "DE", "United States": "US", "Czech Republic": "CZ", "Belgium": "BE",
      
      # Middle East and Asia
      "United Arab Emirates": "AE", "Malta": "MT", "France": "FR", "Mexico": "MX",
      "Taiwan Province of China": "TW", "Uruguay": "UY", "Saudi Arabia": "SA", 
      "Spain": "ES", "Guatemala": "GT", "Italy": "IT", "Singapore": "SG",
      "Brazil": "BR", "Slovenia": "SI", "El Salvador": "SV", "Kosovo": "XK",
      "Panama": "PA", "Slovakia": "SK", "Uzbekistan": "UZ", "Chile": "CL",
      "Bahrain": "BH", "Lithuania": "LT", "Trinidad and Tobago": "TT", "Poland": "PL",
      
      # South America and Caribbean  
      "Colombia": "CO", "Cyprus": "CY", "Nicaragua": "NI", "Romania": "RO",
      "Kuwait": "KW", "Mauritius": "MU", "Kazakhstan": "KZ", "Estonia": "EE",
      "Philippines": "PH", "Hungary": "HU", "Thailand": "TH", "Argentina": "AR",
      "Honduras": "HN", "Latvia": "LV", "Ecuador": "EC", "Portugal": "PT",
      "Jamaica": "JM", "South Korea": "KR", "Japan": "JP", "Peru": "PE",
      "Serbia": "RS", "Bolivia": "BO", "Pakistan": "PK", "Paraguay": "PY",
      "Dominican Republic": "DO", "Bosnia and Herzegovina": "BA", "Moldova": "MD",
      
      # Eastern Europe and Central Asia
      "Tajikistan": "TJ", "Montenegro": "ME", "Russia": "RU", "Kyrgyzstan": "KG",
      "Belarus": "BY", "North Cyprus": "CY", "Greece": "GR", "Croatia": "HR",
      "Libya": "LY", "Mongolia": "MN", "Malaysia": "MY", "Vietnam": "VN",
      "Indonesia": "ID", "Ivory Coast": "CI", "Benin": "BJ", "Maldives": "MV",
      "Congo (Brazzaville)": "CG", "Azerbaijan": "AZ", "Macedonia": "MK",
      "Ghana": "GH", "Nepal": "NP", "Turkey": "TR", "China": "CN",
      "Turkmenistan": "TM", "Bulgaria": "BG", "Morocco": "MA", "Cameroon": "CM",
      
      # Africa
      "Venezuela": "VE", "Algeria": "DZ", "Senegal": "SN", "Guinea": "GN",
      "Niger": "NE", "Laos": "LA", "Albania": "AL", "Cambodia": "KH",
      "Bangladesh": "BD", "Gabon": "GA", "South Africa": "ZA", "Iraq": "IQ",
      "Lebanon": "LB", "Burkina Faso": "BF", "Gambia": "GM", "Mali": "ML",
      "Nigeria": "NG", "Armenia": "AM", "Georgia": "GE", "Iran": "IR",
      "Jordan": "JO", "Mozambique": "MZ", "Kenya": "KE", "Namibia": "NA",
      "Ukraine": "UA", "Liberia": "LR", "Palestinian Territories": "PS",
      "Uganda": "UG", "Chad": "TD", "Tunisia": "TN", "Mauritania": "MR",
      "Sri Lanka": "LK", "Congo (Kinshasa)": "CD", "Swaziland": "SZ",
      "Myanmar": "MM", "Comoros": "KM", "Togo": "TG", "Ethiopia": "ET",
      "Madagascar": "MG", "Egypt": "EG", "Sierra Leone": "SL", "Burundi": "BI",
      "Zambia": "ZM", "Haiti": "HT", "Lesotho": "LS", "India": "IN",
      "Malawi": "MW", "Yemen": "YE", "Botswana": "BW", "Tanzania": "TZ",
      "Central African Republic": "CF", "Rwanda": "RW", "Zimbabwe": "ZW",
      "South Sudan": "SS", "Afghanistan": "AF",
      
      # Handle variations and special cases
      "North Macedonia": "MK", "Czechia": "CZ", "Republic of Korea": "KR",
      "Russian Federation": "RU", "Lao PDR": "LA", "Republic of Moldova": "MD",
      "Türkiye": "TR", "Turkiye": "TR", "Hong Kong SAR of China": "HK",
      "Hong Kong S.A.R. of China": "HK", "Viet Nam": "VN", "DR Congo": "CD",
      "Congo": "CG", "Eswatini": "SZ", "Eswatini, Kingdom of*": "SZ",
      "State of Palestine": "PS", "Côte d'Ivoire": "CI",
      
      # Special administrative regions and territories
      "Puerto Rico": "PR", "Qatar": "QA", "Oman": "OM", "Guyana": "GY",
      "Angola": "AO", "Belize": "BZ", "Bhutan": "BT", "Cuba": "CU",
      "Djibouti": "DJ", "Somalia": "SO", "Sudan": "SD", "Suriname": "SR",
      "Syria": "SY", "Somaliland Region": "SO",  # Map to Somalia
      
      # Handle entries with asterisks (remove asterisk, use same mapping)
      "Luxembourg*": "LU", "Guatemala*": "GT", "Kuwait*": "KW", "Belarus*": "BY",
      "Turkmenistan*": "TM", "North Cyprus*": "CY", "Libya*": "LY", 
      "Azerbaijan*": "AZ", "Gambia*": "GM", "Liberia*": "LR", "Niger*": "NE",
      "Comoros*": "KM", "Palestinian Territories*": "PS", "Madagascar*": "MG",
      "Chad*": "TD", "Yemen*": "YE", "Mauritania*": "MR", "Lesotho*": "LS",
      "Botswana*": "BW", "Rwanda*": "RW",
      
      # Handle data quality issues - map to None or exclude
      "xx": None,  # Invalid entry, will be filtered out
  }
  ```

## Specific Implementation Instructions Based on Actual API Structure

### 1. Django Setup
- Configure Django project with proper settings for decimal precision (for coordinates, happiness scores)
- Set up static files and templates configuration
- Configure database with initial migrations
- Create superuser for admin access
- Add Django REST Framework for API endpoints

### 2. World Bank API Integration
**Countries API Processing:**
```python
# Handle nested structure from API response
for country in api_response[1]:  # Skip metadata, get data
    Country.objects.create(
        id=country['id'],
        iso2_code=country['iso2Code'],
        name=country['name'],
        capital_city=country.get('capitalCity', ''),
        longitude=Decimal(country['longitude']) if country['longitude'] else None,
        latitude=Decimal(country['latitude']) if country['latitude'] else None,
        region_id=country['region']['id'] if country['region'] else '',
        region_value=country['region']['value'] if country['region'] else '',
        # ... handle other nested fields
    )
```

**Indicator Data Processing:**
```python
# Parse indicator API response structure  
for record in api_response[1]:  # Skip metadata
    CountryData.objects.create(
        country_id=record['country']['id'],
        indicator_id=record['indicator']['id'], 
        country_iso3_code=record['countryiso3code'],
        date=record['date'],
        value=Decimal(record['value']) if record['value'] else None,
        unit=record.get('unit', ''),
        obs_status=record.get('obs_status', ''),
        decimal_places=record.get('decimal', 0)
    )
```

### 3. Data Filtering and Processing
- **Filter out aggregates**: Exclude countries where region_value = "Aggregates"
- **Handle missing values**: API returns null for missing data points
- **Coordinate conversion**: Convert string coordinates to Decimal fields
- **Country matching**: Create mapping between World Bank codes and happiness report country names
- **Time series handling**: Store date as string (as returned by API) but add year extraction methods

### 2. Data Management
- **Download real World Happiness Report CSV files** from Kaggle or GitHub repositories
- **Parse World Bank API responses** with proper handling of nested objects (region, incomeLevel, etc.)
- **Data cleaning for countries**: Filter out aggregates, handle missing coordinates
- **Data type conversion**: Convert string coordinates to decimals, handle null values
- **Country code standardization**: Map World Happiness Report country names to World Bank codes
- **Create management commands** to process and load both World Bank and happiness data
- **Implement smart caching**: Cache country/indicator lists (rarely change), cache indicator data with TTL
- **API response validation**: Ensure data integrity from World Bank API responses
- **Handle pagination**: World Bank API returns metadata about pages, handle multi-page responses
- **Error handling**: Graceful handling of API failures, missing data, rate limits

### 3. Frontend Implementation (Ultra-Modern Design)
- **Modern CSS Framework approach** with custom styling (no Bootstrap - create custom modern design)
- **Design System**: Implement consistent colors, typography, shadows, and spacing
- **Modern Color Palette**: Use contemporary colors (deep blues, modern greens, elegant grays)
- **Advanced CSS Grid/Flexbox layouts** for complex responsive designs
- **CSS Custom Properties** for dynamic theming and consistency
- **Smooth animations** using CSS transitions and keyframes for all interactions
- **Glassmorphism effects** with backdrop-filter for modern depth
- **Modern form controls** with floating labels and sophisticated styling
- **Card-based components** with subtle shadows and modern spacing
- **Advanced hover states** and focus indicators for better UX
- **Typography hierarchy** with modern font pairing and proper line heights
- **Responsive breakpoints** optimized for modern devices
- **CSS logical properties** for better internationalization support
- **Dark mode implementation** with seamless theme switching
- **Performance optimized CSS** with efficient selectors and minimal bloat

### 4. Chart Types Required
- **Line charts**: For trend analysis over time
- **Dual-axis line charts**: For happiness vs indicator correlation
- **Bar charts**: For regional comparisons
- **Horizontal bar charts**: For country rankings within regions
- **Scatter plots**: For correlation analysis

### 5. User Experience Features (Modern UX Patterns)
- **Intuitive navigation** with breadcrumbs and clear information architecture
- **Smart search and filtering** with real-time results and modern autocomplete
- **Progressive data loading** with skeleton screens and smooth content reveals
- **Interactive data exploration** with zoom, pan, and drill-down capabilities
- **Contextual help and tooltips** with modern popovers and guided tours
- **Keyboard shortcuts** for power users with modern shortcut overlays
- **Advanced accessibility** with proper ARIA labels and focus management
- **Error boundaries** with helpful error messages and recovery suggestions
- **Offline support indicators** with modern connectivity status
- **Performance feedback** with loading progress and optimization hints
- **Personalization options** with saved preferences and custom layouts
- **Modern notification system** with toast messages and status updates
- **Collaborative features** with sharing capabilities and export options
- **Advanced data filtering** with tags, date ranges, and multi-select options
- **Responsive interactions** optimized for both desktop and mobile experiences

## Code Generation Requirements

### Please provide complete code for:
1. **Django project configuration** (settings.py, urls.py, wsgi.py)
2. **Models** with relationships and methods
3. **Excel data loading utilities** to process World_Happiness_Report_2020_2025.xlsx and load into Django models
4. **Views** (both template views and API views)
5. **URL configuration** for all endpoints
6. **HTML templates** with proper inheritance and responsive design
7. **CSS styling** for modern, clean appearance
8. **JavaScript** for chart rendering and AJAX interactions
9. **Management commands** for World Bank API data population and Excel file processing
10. **Requirements.txt** with all dependencies (including pandas, openpyxl for Excel processing)
11. **README.md** with setup instructions including how to process the Excel happiness data
12. **Instructions for placing World_Happiness_Report_2020_2025.xlsx** in the correct directory

## Additional Considerations
- Include proper error handling throughout the application
- Add logging for debugging and monitoring
- Implement basic security measures (CSRF protection, etc.)
- Ensure code is well-commented and maintainable
- Include sample data for testing and demonstration
- Add basic admin interface configuration for data management

## Success Criteria
The application should allow users to:
1. Select countries and view indicator trends over time
2. Compare happiness scores with development indicators
3. Explore regional happiness patterns
4. Compare countries within regions for specific indicators
5. Export visualizations for presentations/reports

Please generate the complete, working Django application with all the specified features and functionality.